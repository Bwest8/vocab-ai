generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VocabSet {
  id           String             @id @default(cuid())
  name         String
  description  String?
  grade        String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  gameProgress GameModeProgress[]
  words        VocabWord[]
  attempts     GameAttempt[]

  @@map("vocab_sets")
}

model VocabWord {
  id                String          @id @default(cuid())
  word              String
  definition        String
  teacherDefinition String?
  pronunciation     String?
  partOfSpeech      String?
  vocabSetId        String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  progress          StudyProgress[]
  examples          VocabExample[]
  vocabSet          VocabSet        @relation(fields: [vocabSetId], references: [id], onDelete: Cascade)
  attempts          GameAttempt[]

  @@index([vocabSetId])
  @@map("vocab_words")
}

model VocabExample {
  id               String    @id @default(cuid())
  sentence         String
  imageDescription String
  imageUrl         String?
  wordId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  word             VocabWord @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@index([wordId])
  @@map("vocab_examples")
}

model StudyProgress {
  id             String    @id @default(cuid())
  wordId         String
  userId         String?
  correctCount   Int       @default(0)
  incorrectCount Int       @default(0)
  masteryLevel   Int       @default(0)
  lastStudied    DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  word           VocabWord @relation(fields: [wordId], references: [id], onDelete: Cascade)

  @@unique([wordId, userId])
  @@index([wordId])
  @@index([userId])
  @@map("study_progress")
}

model GameProfile {
  id                 String             @id @default(cuid())
  profileKey         String             @unique @map("profile_key")
  points             Int                @default(0)
  questionsAttempted Int                @default(0) @map("questions_attempted")
  questionsCorrect   Int                @default(0) @map("questions_correct")
  streak             Int                @default(0)
  currentCombo       Int                @default(0) @map("current_combo")
  bestCombo          Int                @default(0) @map("best_combo")
  lastPlayedAt       DateTime?          @map("last_played_at")
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  modeProgress       GameModeProgress[]
  attempts           GameAttempt[]

  @@map("game_profiles")
}

model GameModeProgress {
  id           String      @id @default(cuid())
  profileId    String      @map("profile_id")
  vocabSetId   String      @map("vocab_set_id")
  mode         String      @db.VarChar(40)
  attempted    Int         @default(0)
  correct      Int         @default(0)
  lastPlayedAt DateTime?   @map("last_played_at")
  completedAt  DateTime?   @map("completed_at")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  profile      GameProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  vocabSet     VocabSet    @relation(fields: [vocabSetId], references: [id], onDelete: Cascade)

  @@unique([profileId, vocabSetId, mode])
  @@index([vocabSetId])
  @@index([profileId])
  @@map("game_mode_progress")
}

/// Individual game attempts for auditing and per-word analytics
model GameAttempt {
  id             String      @id @default(cuid())
  profileId      String?     @map("profile_id")
  vocabSetId     String      @map("vocab_set_id")
  wordId         String?     @map("word_id")
  mode           String      @db.VarChar(40)
  correct        Boolean
  pointsAwarded  Int         @default(0) @map("points_awarded")
  timeRemaining  Int?        @map("time_remaining")
  createdAt      DateTime    @default(now()) @map("created_at")

  profile        GameProfile? @relation(fields: [profileId], references: [id], onDelete: SetNull)
  vocabSet       VocabSet      @relation(fields: [vocabSetId], references: [id], onDelete: Cascade)
  word           VocabWord?    @relation(fields: [wordId], references: [id], onDelete: SetNull)

  @@index([profileId])
  @@index([vocabSetId])
  @@index([wordId])
  @@index([mode])
  @@map("game_attempts")
}
